{"version":3,"sources":["pages/App.js","pages/Login.js","pages/Home.js","router/index.js","serviceWorker.js","index.js"],"names":["App","className","to","Component","Login","state","username","password","usernameChange","event","setState","target","value","passwordChange","login","Axios","then","res","data","status","props","history","push","Item","placeholder","maxLength","onChange","this","type","onClick","Home","indexChange","index","dataSource","_getData","get","bind","pagination","bordered","columns","title","dataIndex","key","Rrouter","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb2c0575.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>欢迎来到德莱文王国</h1>\r\n                <Link to=\"/login\">去登录</Link>\r\n                <br />\r\n                <Link to=\"/home\">去首页</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React, { Component } from 'react'\r\nimport { Form, Input, Button } from 'antd'\r\nimport Axios from 'axios'\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        username: \"\",\r\n        password: \"\"\r\n    }\r\n    usernameChange = (event) => {\r\n        this.setState({\r\n            username: event.target.value\r\n        })\r\n    }\r\n    passwordChange = (event) => {\r\n        this.setState({\r\n            password: event.target.value\r\n        })\r\n    }\r\n    login = () => {\r\n        const {\r\n            username,\r\n            password\r\n        } = this.state\r\n        Axios(\"login.json\", {\r\n            username,\r\n            password\r\n        }).then((res) => {\r\n            const { data } = res;\r\n            if(data.status === 0) {\r\n                this.props.history.push(\"/home\")\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <Form className=\"form-login\">\r\n                <Form.Item>\r\n                    <Input placeholder=\"请输入用户名\" maxLength={6} onChange={this.usernameChange}></Input>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Input placeholder=\"请输入密码\" maxLength={6} type=\"password\" onChange={this.passwordChange}></Input>\r\n                </Form.Item>\r\n                <label>{this.state.username} - {this.state.password}</label>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" onClick={this.login}>登录</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\nimport { Table } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport Axios from 'axios'\r\n\r\nclass Home extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            dataSource: [],\r\n            index: 0\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this._getData()\r\n    }\r\n    _getData() {\r\n        Axios.get(\"home.json\").then(res => {\r\n            const { data } = res\r\n            if (data.status === 0) {\r\n                this.setState({\r\n                    dataSource: data.data\r\n                })\r\n            }\r\n        })\r\n    }\r\n    indexChange = (index) => {\r\n        this.setState({\r\n            index\r\n        })\r\n    }\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: \"地区\",\r\n                dataIndex: \"area\",\r\n                key: 'area'\r\n            }, {\r\n                title: \"Java\",\r\n                dataIndex: \"java\",\r\n                key: 'java'\r\n            }, {\r\n                title: \"PHP\",\r\n                dataIndex: \"php\",\r\n                key: 'php'\r\n            }, {\r\n                title: \"Node\",\r\n                dataIndex: \"node\",\r\n                key: 'node'\r\n            }, {\r\n                title: \"JS\",\r\n                dataIndex: \"js\",\r\n                key: 'js'\r\n            }, {\r\n                title: \"Python\",\r\n                dataIndex: \"python\",\r\n                key: 'python'\r\n            }\r\n        ];\r\n        return (\r\n            <div className=\"home\">\r\n                <h1>语言大数据报告</h1>\r\n                <div className=\"wrap\">\r\n                    <div className=\"nav\">\r\n                        <a className={this.state.index === 0 ? 'active' : ''} onClick={this.indexChange.bind(this, 0)}>语音动态</a>\r\n                        <a className={this.state.index === 1 ? 'active' : ''} onClick={this.indexChange.bind(this, 1)}>语音地图</a>\r\n                        <a className={this.state.index === 2 ? 'active' : ''} onClick={this.indexChange.bind(this, 2)}>语音热搜</a>\r\n                        <a className={this.state.index === 3 ? 'active' : ''} onClick={this.indexChange.bind(this, 3)}>语音播放</a>\r\n                    </div>\r\n                    <p>数据纯属虚构</p>\r\n                    <Table pagination={false} bordered dataSource={this.state.dataSource} columns={columns} />\r\n                    <Link to=\"/\" className=\"link-nav\">回首页</Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport App from '../pages/App'\r\nimport Login from '../pages/Login'\r\nimport Home from '../pages/Home'\r\n\r\nexport default function Rrouter() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={App}></Route>\r\n                <Route path=\"/login\" component={Login}></Route>\r\n                <Route path=\"/home\" component={Home}></Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Router from './router';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n  <Router />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}